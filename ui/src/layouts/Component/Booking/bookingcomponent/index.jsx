import React, { useCallback, useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import './index.scss';
import { serviceDetails } from '../../../../data/serviceDetails';
import { spaComboDetail } from '../../../../data/spaComboDetail';
import { hairStylingDetail } from '../../../../data/hairStylingDetail'; 
import debounce from 'lodash/debounce';
const BookingComponent = () => {
  const [step, setStep] = useState(0);
  const navigate = useNavigate();
  const location = useLocation();
  
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const stepParam = params.get('step');
    if (stepParam !== null) {
      setStep(parseInt(stepParam, 10));
    } else {
      setStep(0);
    }
  }, [location]);

  const handleViewAllSalons = () => {
    navigate('/booking?step=1');
  };

  const handleViewAllServices = () => {
    navigate('/booking?step=2');
  };

  const renderStepContent = () => {
    switch (step) {
      case 0:
        return (
          <div className="booking-steps">
            <div className="step">
              <h3>1. Ch·ªçn salon</h3>
              <div className="option" onClick={handleViewAllSalons}>
                <span className="icon">üè†</span>
                <span>Xem t·∫•t c·∫£ salon</span>
                <span className="arrow">‚Ä∫</span>
              </div>
            </div>
            <div className="step">
              <h3>2. Ch·ªçn d·ªãch v·ª•</h3>
              <div className="option" onClick={handleViewAllServices}>
              <span className="icon">‚úÇÔ∏è</span>
              <span>Xem t·∫•t c·∫£ d·ªãch v·ª• h·∫•p d·∫´n</span>
              <span className="arrow">‚Ä∫</span>
            </div>
            </div>
            <div className="step">
              <h3>3. Ch·ªçn ng√†y, gi·ªù & stylist</h3>
              <div className="option">
              <span className="icon">üìÖ</span>
              <span>H√¥m nay, T2 (07/10)</span>
              <span className="tag">Ng√†y th∆∞·ªùng</span>
              <span className="arrow">‚Ä∫</span>
            </div>
            </div>
          </div>
        );
      case 1:
        return <SalonSelectionStep />;
      case 2:
        return <ServiceSelectionStep />;
      case 3:
        return <DateTimeSelectionStep />;
      default:
        return null;
    }
  };

  return (
    <div className="booking-wrapper">
      <h2>ƒê·∫∑t l·ªãch gi·ªØ ch·ªó</h2>
      <div className="booking-container">
        {renderStepContent()}
         <button className="submit-button">CH·ªêT GI·ªú C·∫ÆT</button>
      </div>
    </div>
  );
};

const SalonSelectionStep = () => {
  const cities = [
    'An Giang', 'B·∫Øc Ninh', 'B√¨nh ƒê·ªãnh', 'B√¨nh D∆∞∆°ng', 'C·∫ßn Th∆°',
    'ƒê√† N·∫µng', 'ƒê·∫Øk L·∫Øc', 'ƒê·ªìng Nai', 'HCM', 'H√† N·ªôi',
    'H√† Tƒ©nh', 'H·∫£i Ph√≤ng', 'Kh√°nh H√≤a', 'Long An', 'Ngh·ªá An',
    'Qu·∫£ng Ninh', 'Th√°i Nguy√™n', 'Thanh H√≥a', 'Ti·ªÅn Giang', 'V≈©ng T√†u'
  ];

  return (
    <div className="salon-selection">
      <div className="search-bar">
        <input type="text" placeholder="T√¨m ki·∫øm salon theo t·ªânh, th√†nh ph·ªë, qu·∫≠n" />
      </div>
      <button className="find-nearby">
        <span className="icon">üìç</span> T√¨m salon g·∫ßn anh
      </button>
      <div className="city-list">
        <h3>30Shine c√≥ m·∫∑t tr√™n c√°c t·ªânh th√†nh:</h3>
        <div className="city-grid">
          {cities.map((city, index) => (
            <button key={index} className="city-button">{city}</button>
          ))}
        </div>
      </div>
    </div>
  );
};

const ServiceSelectionStep = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('all');
    const [filteredServices, setFilteredServices] = useState([]);
  
    const allServices = {
      ...serviceDetails,
      ...spaComboDetail,
      ...hairStylingDetail
    };
  
    const filterServices = useCallback((search, category) => {
      return Object.entries(allServices).filter(([key, service]) => {
        const matchesSearch = 
          service.title.toLowerCase().includes(search.toLowerCase()) ||
          service.description.toLowerCase().includes(search.toLowerCase()) ||
          (service.price && service.price.toLowerCase().includes(search.toLowerCase()));
        const matchesCategory = category === 'all' || key.includes(category);
        return matchesSearch && matchesCategory;
      });
    }, [allServices]);
  
    const debouncedFilter = useCallback(
      debounce((search, category) => {
        const filtered = filterServices(search, category);
        setFilteredServices(filtered);
      }, 300),
      [filterServices]
    );
  
    useEffect(() => {
      debouncedFilter(searchTerm, selectedCategory);
    }, [searchTerm, selectedCategory, debouncedFilter]);
  
    const handleSearchChange = (e) => {
      setSearchTerm(e.target.value);
    };
  
    const handleCategoryChange = (category) => {
      setSelectedCategory(category);
    };
  
    return (
      <div className="service-selection">
        <div className="search-bar">
          <input 
            type="text" 
            placeholder="T√¨m ki·∫øm d·ªãch v·ª•, nh√≥m d·ªãch v·ª• ho·∫∑c gi√°" 
            value={searchTerm}
            onChange={handleSearchChange}
          />
        </div>
        <div className="category-buttons">
          <button onClick={() => handleCategoryChange('all')} className={selectedCategory === 'all' ? 'active' : ''}>T·∫•t c·∫£ d·ªãch v·ª•</button>
          <button onClick={() => handleCategoryChange('cat-goi')} className={selectedCategory === 'cat-goi' ? 'active' : ''}>C·∫Øt g·ªôi x·∫£ massage</button>
          <button onClick={() => handleCategoryChange('uon')} className={selectedCategory === 'uon' ? 'active' : ''}>U·ªën ƒë·ªãnh h√¨nh t√≥c</button>
          <button onClick={() => handleCategoryChange('nhuom')} className={selectedCategory === 'nhuom' ? 'active' : ''}>Nhu·ªôm t√≥c</button>
          <button onClick={() => handleCategoryChange('goi-combo')} className={selectedCategory === 'goi-combo' ? 'active' : ''}>G·ªôi massage</button>
        </div>
        <div className="service-list">
          {filteredServices.map(([key, service]) => (
            <div key={key} className="service-item">
              <img src={service.steps[0].image} alt={service.title} />
              <h3>{service.title}</h3>
              <p>{service.description}</p>
              <p className="price">{service.price || 'Gi√° li√™n h·ªá'}</p>
              <button className="add-service">Th√™m d·ªãch v·ª•</button>
            </div>
          ))}
        </div>
        {filteredServices.length === 0 && (
          <p className="no-results">Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• ph√π h·ª£p.</p>
        )}
      </div>
    );
  };

const DateTimeSelectionStep = () => {
  return <div>Ch·ªçn ng√†y, gi·ªù & stylist</div>;
};

export default BookingComponent;